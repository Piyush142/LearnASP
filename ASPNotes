## Setup

Visual studio
Sql Server
Postman

Your code doesn't require static main void in C# 9. You can straight-away write any piece of code. That will be complied into main method by the complier itself. Optinally you can write it.

A WebApplication Builder will load the configurations, enviornment and services.

ASP.NET Core applications require a server in order to receive and send the response.

- Kestrel
  Is the default crossplatform http server for ASP.NET Core applications.
  It acts as both developement server as well as real application server which is able to recieve the request from real internet.

However most of the cases in real world you will use it for development and application server only and in Production you will be using reverse proxy servers.

Reverse Proxy Servers: IIS, Nginx, Apache

The Kestrel prepares an HTTPContext Object(which contains the details of the request) and sends it to the Application Code. So that the application code can receive that context and process based on that and provides the response out back to the Kestrel. Then the Kestrel sends back the response to the client.

But Kestrel does'nt support some of the advance features that are required on the internet these days. For Example:
Load Balancing,
URL Rewriting

These are by default not supported by kestrel. But this is not a problem.
Because we can use Reverse proxy server.

In Production applications we prefer Reverse proxy servers for its advanced features.

## launchSettings.json

under properties you will find launchSettings.json.
Collection of key value pair.

By Default you have two profiles configured for your project.
Profiles is a collection of settings which enables a particular server to run our application when you start the project.

Enviornment Varaibles are kept in launchSettings.json.
And there are other properties as well.
You can choose which server you want to use, using property "commandName".
Port Number can be between: 1024 - 65535

Benefits of IIS express is that it is light weight version of IIS.
Both IIS and IIS Express support multiple features which are not supported by Kestrel.

Ngnix is very popular for Reverse proxy and is hosted on linux server.

---

## Module 3 HTTP

All websites through internet follow HTTP protocols
HTTP: Hyper Text Transfer Protocol
HTTP is an application protocol that defines a set of rules to send request and from the browser to the server and send response from the server to the browser. It is like question and answer.
All the websites over the internet use HTTP Protocol with or without SSL( that is Security Socket Layer).
HTTP protocols with security a security layer is know as HTTPS.

HTTP is the default protocol in all the browsers. Thats why it is generally hidden.
You can also see the network request in Networking tools.

## HTTP Response

This is what kestrel sends in response headers when it recives a HTTP Request.

HTTP/1.1 200 OK <!-- Start Line The HTTP version number is (1.1). Status code is 200. Status description 'OK'-->
Content-Type: text/plain; charset=utf-8 <!--HTTP Headers Key: Value pair-->
Date: Tue, 28 Mar 2023 15:17:19 GMT <!--HTTP Headers Key: Value pair-->
Server: Kestrel
Transfer-Encoding: chunked

Based on the above format we can understand the structure of our HTTP Response.

<!--Start Line-->
<!-- HTTP Headers -->
<!-- HTTP Headers -->

<!-- Response Body -->

## HTTP Status Codes

| Status Type | Description   | Status Code | Name                  |
| ----------- | ------------- | ----------- | --------------------- |
| 1XX         | Informational | 101         | Switching Protocols   |
| 2XX         | Success       | 200         | OK                    |
| 3XX         | Redirection   | 302         | Found                 |
|             |               | 304         | Not Modified          |
| 4XX         | Client Error  | 400         | Bad Request           |
|             |               | 401         | Unauthorised          |
|             |               | 404         | Not Found             |
| 5XX         | Server Error  | 500         | Internal Server Error |

- Switching Protocol: For example we are switching from HTTP to HTTPS.
- Success: If the process complete successfully.
  Found: Indicates the redirection from one URL to another URL.
- Not Modified: That is the file is already available on browser cache such as image or html file or css file, so the browser can use the same file from the cache, it generally happens for static files such as images.Loaded from cached memory on the browser.
- Bad Request: That is some of the part is not included in the request or it is missing some important information.
- Unauthorized: This is authorization issue. That means any one of the user credentials is incorrect.
- Not Found: If you enter any incorrect URL it is represented as Not Found.
- Server Error: Server side runtime error. It is 500 Internal server error.

### How can you send this status code from your server side code?

Headers is a dictonary in which we can add key value pairs.
In general the keys should not contain any spaces but the vaules can contain spaces.

## HTTP Request

It is a message that is sent from the browser to server.
HTTP Request format

<!--
Method Url HTTP/1.1
key: value;
key: value;

Request Body
...
...
-->

Method: GET, POST, PUT and DELETE
Url: is used to locate any particular information on the server.
Then we have HTTP version.
That is currently 1.1( You can configure and unable HTTP version 2 and 3 optionally)

## How can you send values from the browser to server?

By using query strings

## Query String

Query string is the syntax where you can send the parameter value from the request to the server means from the browser to server, along with the request.

In a URL for example(/dashboard?id=1) the right hand side is the query string (key value pairs) and the left hand side of the '?' is the Url path.

The difference between GET and POST will be the
that GET will not have any body, while the POST request will have body attached to it.

### HTTP Request Headers

Request headers are generally information to the server.
Request headers are the way how the browser talks to the server.
